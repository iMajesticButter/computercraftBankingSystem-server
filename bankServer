os.loadAPI("hash");
local ecnet = require("ecnet");

local ADDRESS_CHANNEL = 25783;
local modem = peripheral.find("modem");
local s_modem = ecnet.wrap(modem);

local address = ecnet.address;

local USERS_DIRECTORY = "/users/";
local CONFIG_DIR = "/config/";
local ADDRESS_LIST = CONFIG_DIR .. "authorizedAddresses";
local ADMIN_PASSWORD = CONFIG_DIR .. "admin";

local NETWORK_ADDUSERDAT = "NETWORK_ADDUSERDAT"; -- add a new user to the database
local NETWORK_ISAUTHUSER = "NETWORK_ISAUTHUSER"; -- check if the users credentials are correct, sends back a boolean
local NETWORK_GETBALANCE = "NETWORK_GETBALANCE"; -- gets users balance, requires auth
local NETWORK_ADDBALANCE = "NETWORK_ADDBALANCE"; -- adds to users balance, requires auth
local NETWORK_SUBBALANCE = "NETWORK_SUBBALANCE"; -- subtracts from users balance, requires auth
local NETWORK_ADDADDRESS = "NETWORK_ADDADDRESS"; -- add an address that is authorized to do ATM stuff, requires a special password
local NETWORK_ISAUTHADDR = "NETWORK_ISAUTHADDR"; -- ask if address is authed


if not fs.isDir(USERS_DIRECTORY) then
	print ("creating users directory");
	fs.makeDir(USERS_DIRECTORY)
end

if not fs.isDir(CONFIG_DIR) then
	print ("creating config directory");
	fs.makeDir(CONFIG_DIR)
end

-- utility functions
function makeSalt()

	all = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}:',.<>/?=+-_!@#$%^&*()\\|[];"

	salt = ""

	for i = 1, 15 do
		r = math.random(#all);
		salt = salt.. string.sub(all, r, r);
	end

	return salt;

end

function userExists(name)
	print ("checking if user with name " .. name .. " exists");
	local path = USERS_DIRECTORY .. name;
	if fs.exists(path) then
		return true;
	end
	return false;
end

-- core functions
function makeUser(name, password)
	print ("make user: " .. name);
	
	if userExists(name) then
		print ("user with name " .. name .. " already exists!");
		return false;
	end

	print ("creating user: " .. name);

	local path = USERS_DIRECTORY .. name;

	local file = fs.open(path, "w");

	local salt = makeSalt();
	print("salt is: " .. salt);

	local passhash = hash.hash(password .. salt);
	print("passhash is: " .. passhash);

	file.writeLine(passhash);
	file.writeLine(salt);
	file.writeLine(tostring(0));

	file.close();

	return true;

end

function getUser(name)

	if not userExists(name) then
		return nil;
	end

	local path = USERS_DIRECTORY .. name;
	local file = fs.open(path, "r");

	local user = {};

	user.name = name;
	user.passhash = file.readLine();
	user.salt = file.readLine();
	user.balance = tonumber(file.readLine());
	user.auth = false;

	file.close();

	print ("user: " .. user.name .. " has passhash: " .. user.passhash .. " salt: " .. user.salt .. " balance: " .. user.balance);

	return user;

end

function authUser(user, password)
	if user ~= nil then -- not equal is ~= because lua has to be different
		if hash.hash(password .. user.salt) == user.passhash then
			print("authorized user: " .. user.name);
			user.auth = true; -- holy shit it actually passed it by reference, did not expect that to work...
			return true;
		end
		print("failed to authorize user: " .. user.name);
	end
	return false;
end

function getAndAuth(name, password)
	local user = getUser(name);
	authUser(user, password);
	return user;
end

function saveUser(user, add)
	if user ~= nil then
		local path = USERS_DIRECTORY .. user.name;
		local file = fs.open(path, "w");
		file.writeLine(user.passhash);
		file.writeLine(user.salt);
		file.writeLine(user.balance);
		file.close();
		return true;
	end
	return false;
end

function checkAuthedAddress(add) -- check if message is coming from an address that has previously been authourized
	-- not nescessary for account-to-account transfers, that will only require auth form account that is paying
	-- this is for ATM's and sutch (things that can add money from physical currency)
	-- just an extra security layer so you cant just make a fake ATM
	if not fs.exists(ADDRESS_LIST) then
		print("WARNING, no addresses authourized");
		return false;
	end

	local file = fs.open(ADDRESS_LIST, "r");

	local a = "";
	while true do
		a = file.readLine()
		if a == nil then
			break;
		end
		if a == add then
			file.close();
			return true;
		end
	end
	file.close();
	return false;

end

function addAuthedAddress(add, password) 

	if not fs.exists(ADMIN_PASSWORD) then
		print("WARNING, no admin password set");
		return false;
	end

	local file = fs.open(ADMIN_PASSWORD, "r");
	local hashpass = file.readLine();
	local salt = file.readLine();
	file.close();

	if hash.hash(password .. salt) == hashpass then

		local addF = fs.open(ADDRESS_LIST, fs.exists(ADDRESS_LIST) and "a" or "w");
		addF.writeLine(add);
		addF.close();

		return true;
	end
	return false;

end

print ("ecnet started on address: " .. address);

modem.open(ADDRESS_CHANNEL);

-- test
makeUser("bob", "bobsPassword");
local user = getAndAuth("bob", "bobsPassword");

user.balance = user.balance + 10;

saveUser(user);

-- main program loop
while true do
	print ("program loop");
	parallel.waitForAny(
		function()
			s_modem.listen();
		end, 
		function()
			while true do
				local _, from, message = os.pullEvent("ecnet_message");
				print ("ecnet message recieved: " .. message);

				if type(message) == "table" then
					print ("table message format");
					if message.type == NETWORK_ADDADDRESS then
						print ("NETWORK_ADDADDRESS");
						addAuthedAddress(from, message.pass);
					end
				end

			end
		end,
		function()
			while true do
				local event, modemSide, senderChannel, replyChannel, message, distance = os.pullEvent("modem_message");

				if(senderChannel == ADDRESS_CHANNEL) then
					if(message == "DNS_REQ BANK") then
						print ("modem address request message recieved");
						modem.transmit(replyChannel, ADDRESS_CHANNEL, address);
					end
				end

			end
		end)
end