os.loadAPI("hash");
local ecnet = require("ecnet");

local ADDRESS_CHANNEL = 25783;
local modem = peripheral.find("modem");
local s_modem = ecnet.wrap(modem);

local address = ecnet.address;

local USERS_DIRECTORY = "/users/"

if not fs.isDir(USERS_DIRECTORY) then
	print ("creating users directory");
	fs.makeDir(USERS_DIRECTORY)
end

-- utility functions
function makeSalt()

	all = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}:',.<>/?=+-_!@#$%^&*()\\|[];"

	salt = ""

	for i = 1, 15 do
		r = math.random(#all);
		salt = salt.. string.sub(all, r, r);
	end

	return salt;

end

function userExists(name)
	print ("checking if user with name " .. name .. " exists");
	local path = USERS_DIRECTORY .. name;
	if fs.exists(path) then
		return true;
	end
	return false;
end

-- core functions
function makeUser(name, password)
	print ("make user: " .. name);
	
	if userExists(name) then
		print ("user with name " .. name .. " already exists!");
		return false;
	end

	print ("creating user: " .. name);

	local path = USERS_DIRECTORY .. name;

	local file = fs.open(path, "w");

	local salt = makeSalt();
	print("salt is: " .. salt);

	local passhash = hash.hash(password .. salt);
	print("passhash is: " .. passhash);

	file.writeLine(passhash);
	file.writeLine(salt);
	file.writeLine(tostring(0));

	file.close();

	return true;

end

function getUser(name)

	if not userExists(name) then
		return nil;
	end

	local path = USERS_DIRECTORY .. name;
	local file = fs.open(path, "r");

	local user = {};

	user.name = name;
	user.passhash = file.readLine();
	user.salt = file.readLine();
	user.balance = tonumber(file.readLine());
	user.auth = false;

	print ("user: " .. user.name .. " has passhash: " .. user.passhash .. " salt: " .. user.salt .. " balance: " .. user.balance);

	return user;

end

function authUser(user, password)
	if hash.hash(password .. user.salt) == user.passhash then
		print("authorized user: " .. user.name);
		user.auth = true;
		return true;
	end
	print("failed to authorize user: " .. user.name);
	return false;
end



print ("ecnet started on address: " .. address);

modem.open(ADDRESS_CHANNEL);

-- test
makeUser("bob", "bobsPassword");
local user = getUser("bob");
authUser(user, "bobsPassword");
print("user.auth: " .. tostring(user.auth));

-- main program loop
while true do
	print ("program loop");
	parallel.waitForAny(
		function()
			s_modem.listen();
		end, 
		function()
			while true do
				local _, from, message = os.pullEvent("ecnet_message");
				print ("ecnet message recieved: " .. message);
			end
		end,
		function()
			while true do
				local event, modemSide, senderChannel, replyChannel, message, distance = os.pullEvent("modem_message");

				if(senderChannel == ADDRESS_CHANNEL) then
					if(message == "DNS_REQ BANK") then
						print ("modem address request message recieved");
						modem.transmit(replyChannel, ADDRESS_CHANNEL, address);
					end
				end

			end
		end)
end