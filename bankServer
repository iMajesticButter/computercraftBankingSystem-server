os.loadAPI("hash");
local ecnet = require("ecnet");

local ADDRESS_CHANNEL = 25783;
local modem = peripheral.find("modem");
local s_modem = ecnet.wrap(modem);

local address = ecnet.address;

local bankChest = peripheral.find("minecraft:chest", netFilter);
local outputChest = peripheral.find("kibe:entangled_chest", netFilter);

local USERS_DIRECTORY = "/users/";
local USERS_LOG_DIRECTORY = USERS_DIRECTORY .. "/logs/";
local CONFIG_DIR = "/config/";
local ADDRESS_LIST = CONFIG_DIR .. "authorizedAddresses";
local ADMIN_PASSWORD = CONFIG_DIR .. "admin";
local BANK_LOG_FILE = "bankLog";

local UPDATE_CHANNEL = 3618;
local UPDATE_PASS = "c7e4aa65f0544bbebdef75efc30643bce6debb11b302e59ad9e28ef2ad2b0a0d"

local PRICE_TABLE = "/prices/";

local TRANSFER_FEE = 0.25;
local WITHDRAW_FEE = 0.5;

local NETWORK_BKRESPONSE = "NETWORK_BKRESPONSE"; -- response to client
local NETWORK_ADDUSERDAT = "NETWORK_ADDUSERDAT"; -- add a new user to the database
local NETWORK_ISAUTHUSER = "NETWORK_ISAUTHUSER"; -- check if the users credentials are correct, sends back a boolean
local NETWORK_GETBALANCE = "NETWORK_GETBALANCE"; -- gets users balance, requires auth
local NETWORK_MODBALANCE = "NETWORK_MODBALANCE"; -- adds/subtracts from users balance, requires auth
local NETWORK_ADDADDRESS = "NETWORK_ADDADDRESS"; -- add an address that is authorized to do ATM stuff, requires a special password
local NETWORK_ISAUTHADDR = "NETWORK_ISAUTHADDR"; -- ask if address is authed
local NETWORK_SERCHPRICE = "NETWORK_SERCHPRICE"; -- get a price from the price table
local NETWORK_CAHRGPRICE = "NETWORK_CAHRGPRICE"; -- charge price
local NETWORK_TRANSFERDI = "NETWORK_TRANSFERDI"; -- transfer diamonds to another account
local NETWORK_GETHISTORY = "NETWORK_GETHISTORY"; -- get user account history
local NETWORK_WITHDRAWDI = "NETWORK_WITHDRAWDI"; -- withdraw diamonds from account and storage into entangled transfer chest, max three stacks at a time

local railFair = 2;

if not fs.isDir(USERS_DIRECTORY) then
	print ("creating users directory");
	fs.makeDir(USERS_DIRECTORY)
end

if not fs.isDir(CONFIG_DIR) then
	print ("creating config directory");
	fs.makeDir(CONFIG_DIR)
end

if not fs.isDir(PRICE_TABLE) then
	print ("creating price table directory");
	fs.makeDir(PRICE_TABLE)
end

if not fs.exists(ADMIN_PASSWORD) then
	print ("please set admin password");
	shell.run("setAdminPass");
end

-- utility functions
function log(msg)
	local file = fs.open(BANK_LOG_FILE, "a");
	file.writeLine("[" .. textutils.formatTime(os.time(), false) .. ", day: ".. os.day() .. "] " .. msg);
	file.close();
	print("[log] " .. msg);
end

function userLog(user, msg) -- log to user log (requestable by user)
	local file = fs.open(USERS_LOG_DIRECTORY .. user, "a");
	file.writeLine("[" .. textutils.formatTime(os.time(), false) .. ", day: ".. os.day() .. "] " .. msg);
	file.close();
	print("[userlog: " .. user .. "] " .. msg);
end

function makeSalt()

	all = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}:',.<>/?=+-_!@#$%^&*()\\|[];"

	salt = ""

	for i = 1, 15 do
		r = math.random(#all);
		salt = salt.. string.sub(all, r, r);
	end

	return salt;

end

function userExists(name)
	print ("checking if user with name " .. name .. " exists");
	local path = USERS_DIRECTORY .. name;
	if fs.exists(path) then
		return true;
	end
	return false;
end

-- core functions
function makeUser(name, password)
	print ("make user: " .. name);
	
	if userExists(name) then
		print ("user with name " .. name .. " already exists!");
		return false;
	end

	print ("creating user: " .. name);

	local path = USERS_DIRECTORY .. name;

	local file = fs.open(path, "w");

	local salt = makeSalt();
	print("salt is: " .. salt);

	local passhash = hash.hash(password .. salt);
	print("passhash is: " .. passhash);

	file.writeLine(passhash);
	file.writeLine(salt);
	file.writeLine(tostring(0));

	file.close();

	log("User created: " .. name);

	return true;

end

function getUser(name)

	if not userExists(name) then
		return nil;
	end

	local path = USERS_DIRECTORY .. name;
	local file = fs.open(path, "r");

	local user = {};

	user.name = name;
	user.passhash = file.readLine();
	user.salt = file.readLine();
	user.balance = tonumber(file.readLine());
	user.auth = false;

	file.close();

	print ("user: " .. user.name .. " has passhash: " .. user.passhash .. " salt: " .. user.salt .. " balance: " .. user.balance);

	return user;

end

function authUser(user, password)
	if user ~= nil then -- not equal is ~= because lua has to be different
		if hash.hash(password .. user.salt) == user.passhash then
			print("authorized user: " .. user.name);
			log("User authorized: " .. user.name);
			user.auth = true; -- holy shit it actually passed it by reference, did not expect that to work...
			return true;
		end
		print("failed to authorize user: " .. user.name);
	end
	return false;
end

function getAndAuth(name, password)
	local user = getUser(name);
	authUser(user, password);
	return user;
end

function saveUser(user)
	if user ~= nil then
		local path = USERS_DIRECTORY .. user.name;
		local file = fs.open(path, "w");
		file.writeLine(user.passhash);
		file.writeLine(user.salt);
		file.writeLine(user.balance);
		file.close();
		log("User data modified: " .. user.name);
		return true;
	end
	return false;
end

function checkAuthedAddress(add) -- check if message is coming from an address that has previously been authourized
	-- not nescessary for account-to-account transfers, that will only require auth form account that is paying
	-- this is for ATM's and sutch (things that can add money from physical currency)
	-- just an extra security layer so you cant just make a fake ATM
	if not fs.exists(ADDRESS_LIST) then
		print("WARNING, no addresses authourized");
		return false;
	end

	local file = fs.open(ADDRESS_LIST, "r");

	local a = "";
	while true do
		a = file.readLine()
		if a == nil then
			break;
		end
		if a == add then
			file.close();
			log("Authourized address checked: " .. add);
			return true;
		end
	end
	file.close();
	return false;

end

function addAuthedAddress(add, password) 

	if not fs.exists(ADMIN_PASSWORD) then
		print("WARNING, no admin password set");
		return false;
	end

	local file = fs.open(ADMIN_PASSWORD, "r");
	local hashpass = file.readLine();
	local salt = file.readLine();
	file.close();

	if hash.hash(password .. salt) == hashpass then

		local addF = fs.open(ADDRESS_LIST, fs.exists(ADDRESS_LIST) and "a" or "w");
		addF.writeLine(add);
		addF.close();

		log("Authourized address added: " .. add);

		return true;
	end
	return false;

end

function getPrice(tag)
	if fs.exists(PRICE_TABLE .. tag) then
		local file = fs.open(PRICE_TABLE .. tag, "r");
		local ammount = file.readLine();
		file.close();
		return ammount;
	end
	-- dont return 0, that may cause things to give stuff away for free that they are not supposed to
	return 100000;
end

function setPrice(tag, ammount)
	local file = fs.open(PRICE_TABLE .. tag, "w");
	file.writeLine(ammount);
	file.close();
end

function transfer(fromName, fromPassword, toName, ammount)

	local from = getAndAuth(fromName, fromPassword);
	local to = getUser(toName);

	if ammount >= 0 then
		if from ~= nil then
			if to ~= nil then
				if from.auth then
					if from.balance - ammount >= 0 then
						from.balance = from.balance - ammount;
						to.balance = to.balance + (ammount - TRANSFER_FEE);

						saveUser(from);
						saveUser(to);

						userLog(fromName, "transfer to: " .. toName .. " of " .. ammount .. " diamonds");
						userLog(toName, "transfer from: " .. fromName .. " of " .. ammount .. " diamonds");

						return true;
					end
				end
			end
		end
	end
	return false;
end

print ("ecnet started on address: " .. address);

modem.open(ADDRESS_CHANNEL);

local running = true;

function program()
	-- main program loop
	while true do
		print ("program loop");
		parallel.waitForAny(
		function()
			s_modem.listen();
		end, 
		function()
			while true do
				local _, from, message = os.pullEvent("ecnet_message");
				print ("ecnet message recieved from: " .. from);

				if type(message) == "table" then
					print ("table message format");
					if message.type == NETWORK_ADDADDRESS then

						print ("NETWORK_ADDADDRESS");
						log("Request to authorize address from: " .. from);

						local auth = addAuthedAddress(from, message.pass);

						s_modem.send(from, auth);

					elseif message.type == NETWORK_ADDUSERDAT then

						print ("NETWORK_ADDUSERDAT");
						log("Request to add user: " .. message.name .. " from: " .. from);

						local added = makeUser(message.name, message.pass);

						s_modem.send(from, added);

					elseif message.type == NETWORK_ISAUTHUSER then

						print ("NETWORK_ISAUTHUSER");
						log("Authentication request from: " .. from .. " for user: " .. message.name);

						local user = getAndAuth(message.name, message.pass);

						if user ~= nil then
							s_modem.send(from, user.auth);
						else
							s_modem.send(from, false);
						end

					elseif message.type == NETWORK_GETBALANCE then

						print ("NETWORK_GETBALANCE");
						log("Balance request from: " .. from .. " for user: " .. message.name);

						local user = getAndAuth(message.name, message.pass);

						local dat = {};

						dat.bal = 0;
						dat.auth = false;

						if user ~= nil then
							dat.auth = user.auth;
							if user.auth then
								dat.bal = user.balance;
							end
						end
						s_modem.send(from, dat);
					elseif message.type == NETWORK_MODBALANCE then

						-- this has extra security so only authorized devices can do this
						-- don't want fake ATM's that just add to your balance now do we?
						print ("NETWORK_MODBALANCE");
						log("Balance change from: " .. from .. " for user: " .. message.name .. " by ammount: " .. message.val);

						local authAddr = checkAuthedAddress(from);
						local success = false;
						if authAddr then
							local user = getAndAuth(message.name, message.pass);
							if user.auth then
								if user.balance + message.val >= 0 then

									userLog(message.name, "balance change from: " .. user.balance .. " to: " .. user.balance + message.val);

									user.balance = user.balance + message.val;
									saveUser(user);
									success = true;

								end
							end
						end
						s_modem.send(from, success);
					elseif message.type == NETWORK_ISAUTHADDR then
						print ("NETWORK_ISAUTHADDR");
						log("NETWORK_ISAUTHADDR from: " .. from);
						s_modem.send(from, checkAuthedAddress(from));
					elseif message.type == NETWORK_SERCHPRICE then
						print ("NETWORK_SERCHPRICE");
						log("Price search: " .. from);
						s_modem.send(from, getPrice(message.tag));
					elseif message.type == NETWORK_CAHRGPRICE then
						print ("NETWORK_CAHRGPRICE");

						local price = getPrice(message.tag);

						log("Charge price request: " .. from .. " for user: " .. message.name .. " for tag: " .. message.tag .. " of ammount: " .. price);
						
						local success = false;
						local user = getAndAuth(message.name, message.pass);
						if user.auth then
							if user.balance - price >= 0 then
								if price >= 0 then -- just make sure...
									user.balance = user.balance - price;
									saveUser(user);
									success = true;
									userLog(message.name, "charge of: " .. price .. " diamonds");
								end
							end
						end

						s_modem.send(from, success);
					elseif message.type == NETWORK_TRANSFERDI then
						print ("NETWORK_TRANSFERDI");
						log("Diamond transfer request from: " .. from .. " from user: " .. message.name .. " to user: " .. message.to .. " of ammount: " .. message.val);

						s_modem.send(from, transfer(message.name, message.pass, message.to, message.val));
					elseif message.type == NETWORK_GETHISTORY then
						print ("NETWORK_GETHISTORY");
						log("History request from: " .. from .. " for user: " .. message.name);

						local result = ""

						local user = getAndAuth(message.name, message.pass);
						if user.auth then
							if fs.exists(USERS_LOG_DIRECTORY .. message.name) then
								local file = fs.open(USERS_LOG_DIRECTORY .. message.name, "r");
								result = file.readAll();
							end
						end

						s_modem.send(from, result);
					elseif message.type == NETWORK_WITHDRAWDI then
						print ("NETWORK_WITHDRAWDI");
						log("Withdraw request from: " .. from .. " for user: " .. message.name .. " of ammount: " .. message.val);
						
						local succsess = false;

						local authAddr = checkAuthedAddress(from);
						if authAddr then
							local ammount = message.val;
							local user = getAndAuth(message.name, message.pass);
							if user.auth then
								ammount = math.floor(ammount);
								if ammount > 0 and ammount <= 192 then
									if user.balance - (ammount + WITHDRAW_FEE) >= 0 then

										local found = 0;
										for slot, item in pairs(bankChest.list()) do
											if item.name == "minecraft:diamond" then
												found = found + item.count;
												--bankChest.pushItems(peripheral.getName(outputChest), slot);
											end
										end

										if found >= ammount then

											local moved = 0;

											for s, item in pairs(bankChest.list()) do
												if item.name == "minecraft:diamond" then
													moved = moved + item.count;
													if ammount - moved >= item.count then
														bankChest.pushItems(peripheral.getName(outputChest), s, item.count);
														user.balance = user.balance - item.count;
													else
														bankChest.pushItems(peripheral.getName(outputChest), s, ammount - moved);
														user.balance = user.balance - (ammount - moved);
														break;
													end
												end
											end

											user.balance = user.balance - WITHDRAW_FEE;
											succsess = true;

										end

									end
								end
							end
						end
						s_modem.send(from, succsess);

					end
				end
			end
		end,
		function()
			while true do
				local event, modemSide, senderChannel, replyChannel, message, distance = os.pullEvent("modem_message");

				if(senderChannel == ADDRESS_CHANNEL) then
					if(message == "DNS_REQ BANK") then
						print ("modem address request message recieved");
						modem.transmit(replyChannel, ADDRESS_CHANNEL, address);
					end
				end

			end
		end,
		function()
			while true do
				local event, key, held = os.pullEvent("key");
				print("keypress");
				if keys.getName(key) == "u" then
					print("sending update event");
					modem.transmit(UPDATE_CHANNEL, 0, UPDATE_PASS);
					print("starting update");
					shell.run("/install");
				end
				if keys.getName(key) == "x" then
					return;
				end
			end
		end)
	end
end

while running do
	pcall(program);
end